diff -uNr swig_original/Lib/go/goruntime.swg swig/Lib/go/goruntime.swg
--- swig_original/Lib/go/goruntime.swg	2016-05-15 18:01:17.406179000 +0800
+++ swig/Lib/go/goruntime.swg	2016-05-21 01:33:00.013177876 +0800
@@ -26,6 +26,7 @@
 #if SWIGGO_CGO
 %insert(cgo_comment_typedefs) %{
 #include <stdint.h>
+#include <stddef.h>
 %}
 #endif
 
diff -uNr swig_original/Source/Modules/go.cxx swig/Source/Modules/go.cxx
--- swig_original/Source/Modules/go.cxx	2016-05-15 18:29:30.089580070 +0800
+++ swig/Source/Modules/go.cxx	2016-05-21 01:06:41.756419756 +0800
@@ -349,10 +349,10 @@
     // This test may be removed in the future, when we can assume that
     // everybody has upgraded to Go 1.1.  The code below is prepared
     // for this test to simply be taken out.
-    if (intgo_type_size == 0 && !display_help) {
+    /*if (intgo_type_size == 0 && !display_help) {
       Printf(stderr, "SWIG -go: -intgosize option required but not specified\n");
       SWIG_exit(EXIT_FAILURE);
-    }
+    }*/
 
     if (intgo_type_size == 32) {
       Preprocessor_define("SWIGGO_INTGO_SIZE 32", 0);
@@ -361,7 +361,7 @@
     } else {
       Preprocessor_define("SWIGGO_INTGO_SIZE 0", 0);
     }
-
+    Printf(stdout, "intgosize: %d\n", intgo_type_size);
     // Add typemap definitions.
     SWIG_typemap_lang("go");
     SWIG_config_file("go.swg");
@@ -6525,8 +6525,10 @@
 	break;
       }
     }
-
-    if (Getattr(undefined_types, ty) && !Getattr(defined_types, ty)) {
+    
+    String* go_type = goType(n, ty);
+    
+    if (Getattr(undefined_types, go_type) && !Getattr(defined_types, go_type)) {
       return goWrapperType(n, type, true);
     }
 
