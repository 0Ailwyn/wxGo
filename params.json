{
  "name": "wxGo",
  "tagline": "Golang wxWidgets Wrapper",
  "body": "wxGo\r\n====\r\n\r\nGolang wxWidgets Wrapper\r\n\r\nCompilation \r\n----\r\n\r\n####1. Requisites\r\n\r\n- 64-bit Go\r\n- Linux / Windows\r\n- GCC / MinGW, version > 5\r\n- \\> 5GB RAM\r\n\r\n__Remarks__\r\n\r\n32-bit go will [run out of memory](https://github.com/dontpanic92/wxGo/issues/3) due to 5GB RAM comsumption when compiling and I have no idea on how to decline the memory usage. Any suggestion or discussion will help.\r\n\r\nThe precompiled wxWidgets is compiled with gcc > 5 ( 6.1.1 on Linux, 5.3.0 on Windows using tdm-gcc). So if you want to use the precompiled wxWidgets, your gcc version has also to be > 5, because [GCC changed its ABI since GCC 5 release series](https://gcc.gnu.org/gcc-5/changes.html#libstdcxx).\r\n\r\n\r\n####2. Build & Install\r\n\r\n```\r\ngo get github.com/dontpanic92/wxGo/wx\r\n```\r\n\r\nYou can add `-x` option to print each command it executes.\r\n\r\nCustom Compilation\r\n----\r\n\r\nThis seciton will introduce how to customize wxGo.\r\n\r\n####1. Compilation phases\r\n\r\nwxGo needs a 2-phase compilation. The first is the SWIG phase, that is using [SWIG](https://github.com/SWIG/SWIG) to generate the wrapper code. And the second is the Go phase, which has been described above.\r\n\r\n\r\n####2. Customize SWIG phase\r\n\r\nYou can regenerate the wrapper code using SWIG. Compilation dependencies are:\r\n\r\n- python 2\r\n- sed\r\n- make\r\n- SWIG, of course\r\n\r\n\r\nFirst of all, SWIG has to be patched using `SWIG/swig-3.0.9.patch`. This patch fixed a bug in SWIG, and also turn on an option which cannot be used by default. Then you can modify the source as you want, and run `make` in the `build` folder.\r\n\r\n####3. Customize wxWidgets build\r\n\r\nIf you want to use other wxWidgets build rather than the precompiled one, what you have to do is quite simple.\r\n\r\n- Compile wxWidgets\r\n- Run `go get -d github.com/dontpanic92/wxGo/wx` to let the go-tool just download the source\r\n- Open `wx/setup_OS_ARCH.go`, change the `CPPFLAGS` and `LDFLAGS`\r\n- Run `go install github.com/dontpanic92/wxGo/wx`\r\n\r\nDone!\r\n\r\nUsage\r\n----\r\n\r\nAfter importing `github.com/dontpanic92/wxGo/wx`, the following code will create an empty dialog with a \"Hello World\" as its caption.\r\n\r\n```\r\n    wx.NewApp()\r\n    f := wx.NewDialog(wx.NullWindow, -1, \"Hello World\")\r\n    f.ShowModal()\r\n    f.Destroy()\r\n```\r\n\r\nAll the wx-Classes' objects can be created using `wx.NewCLASS`. Now let us add some controls on it :\r\n\r\n```\r\n    wx.NewApp()\r\n    f := wx.NewDialog(wx.NullWindow, -1, \"Hello World\")\r\n\r\n    bSizer := wx.NewBoxSizer(wx.VERTICAL)\r\n\r\n    checkBox := wx.NewCheckBox(f, wx.ID_ANY, \"Check Me!\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n    bSizer.Add(checkBox, 0, wx.ALL|wx.EXPAND, 5)\r\n\r\n    textCtrl := wx.NewTextCtrl( f, wx.ID_ANY, \"\", wx.DefaultPosition, wx.DefaultSize, 0)\r\n    bSizer.Add(textCtrl, 0, wx.ALL|wx.EXPAND, 5)\r\n\r\n    f.SetSizer(bSizer)\r\n    f.Layout()\r\n    f.ShowModal()\r\n    f.Destroy()\r\n```\r\n\r\nAnd then we can bind an event on the checkbox :\r\n\r\n```\r\nfunc checkboxClicked(e wx.Event) {\r\n    wx.MessageBox(\"Checkbox clicked!\")\r\n}\r\n\r\n//....\r\n    wx.Bind(f, wx.EVT_CHECKBOX, checkboxClicked, checkBox.GetId())\r\n//....\r\n```\r\n\r\nBravo!\r\n\r\n__Remarks : about the memory menagement__\r\n\r\nAll `wx.NewCLASS` functions will allocate memory on C++ side ( on heap ), thus it will not be tracked by Go's garbage collector. However, in most cases we don't need to worry about it, because wxWidgets will handle it. Some common cases are listed below:\r\n\r\n- √ When a `wxWindow` (or its subclasses) being deleted , it will automatically delete all of its children.\r\n\r\n- √ When we click the close botton of a `wxFrame`, by default the `Destroy` will be called and it will be deleted by itself (and also all children). \r\n\r\n- × However when we close a `wxDialog`, the `Destroy` won't be called by default and we have to manually destroy it.\r\n\r\n- × If an object isn't in the GUI hierachy, we have to free the memory by calling `DeleteCLASS`. \r\n\r\nIn a word, `p := wx.NewCLASS` in Go acts the same as `p = new wxCLASS()` in C++. Where we need a `delete p`, then we need a `wx.DeleteCLASS`.\r\n\r\nMore Info: \r\n\r\n- [wxWidgets docs on window deletion](http://docs.wxwidgets.org/3.0/overview_windowdeletion.html)\r\n\r\n- [SWIG docs on Go memory management](http://www.swig.org/Doc3.0/Go.html#Go_class_memory)\r\n\r\nExamples\r\n----\r\n\r\nExamples are in the `examples` folder. `Dapeton` is a simple notepad, and `controls` is a dialog that contains several widgets.\r\n\r\nScreenShot\r\n----\r\n\r\n![screenshot](./examples/screenshot.jpg)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}